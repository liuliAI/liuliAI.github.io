<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>liuliAI • Posts by &#34;遗传算法&#34; tag</title>
        <link>https://liuliai.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Sat, 09 Dec 2023 11:59:00 +0800</pubDate>
        <lastBuildDate>Sat, 09 Dec 2023 11:59:00 +0800</lastBuildDate>
        <category>RWKV</category>
        <category>Mamba</category>
        <category>KAN</category>
        <category>TTT</category>
        <category>线性架构</category>
        <category>CoT</category>
        <category>多模态</category>
        <category>大模型</category>
        <category>长期记忆</category>
        <category>RAG</category>
        <category>Linux</category>
        <category>教程</category>
        <category>Embodied AI</category>
        <category>VLN</category>
        <category>Python</category>
        <category>多核并行</category>
        <category>四元数</category>
        <category>服务器</category>
        <category>概率机器人</category>
        <category>SALM</category>
        <category>数学</category>
        <category>矩阵分析</category>
        <category>数值分析</category>
        <category>数学建模</category>
        <category>电工杯</category>
        <category>遗传算法</category>
        <category>状压DP</category>
        <category>TSP旅行商</category>
        <item>
            <guid isPermalink="true">https://liuliai.github.io/2023/12/09/%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%94%B5%E5%B7%A5%E6%9D%AF%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B/</guid>
            <title>第十四届全国大学生电工杯数学建模竞赛</title>
            <link>https://liuliai.github.io/2023/12/09/%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%B1%8A%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%94%B5%E5%B7%A5%E6%9D%AF%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B/</link>
            <category>数学建模</category>
            <category>电工杯</category>
            <category>遗传算法</category>
            <category>状压DP</category>
            <category>TSP旅行商</category>
            <pubDate>Sat, 09 Dec 2023 11:59:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;没有哪次竞赛比这次更累了，建模、编程、论文三合一，加班加点的通宵，比完直接躺了两天。当然，对于自己各方面的提升也是巨大的，最后也是不负众望，和室友、班长共同努力下取得了一等奖。&lt;br&gt;
&lt;img src=&#34;/image/dgb.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;B 题如下&lt;br&gt;
&lt;img src=&#34;/image/dgb2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;第一问很简单是可重复访问的 TSP 问题，有多种方法，例如多次 Dijkstra + 剪枝优化，暴力枚举 + 剪枝优化（&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;!&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O(n!)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;），遗传算法，状压 DP（状态压缩动态规划，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;O&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msup&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;⋅&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;O(n^{2}\cdot 2^{n})&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.064108em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;⋅&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;）等等。由于数量级问题，遗传算法大概 2 分钟，其他算法不推荐。&lt;br&gt;
状压 DP 代码如下：&lt;/p&gt;
&lt;pre class=&#34;line-numbers language-none&#34;&gt;&lt;code class=&#34;language-none&#34;&gt;import sys

def tsp(dp, mask, pos, dist, n):
    # 如果所有城市都访问过，返回当前位置到起点的距离
    if mask &amp;#x3D;&amp;#x3D; (1 &amp;lt;&amp;lt; n) - 1:
        return dist[pos][0]
    
    # 如果这个状态已经计算过，直接返回结果
    if dp[mask][pos] !&amp;#x3D; -1:
        return dp[mask][pos]
    
    ans &amp;#x3D; sys.maxsize
    # 尝试访问每个城市
    for i in range(n):
        # 如果这个城市还没有被访问过
        if (mask &amp;amp; (1 &amp;lt;&amp;lt; i)) &amp;#x3D;&amp;#x3D; 0:
            # 计算通过这个城市到下一个城市的新路径长度
            newAns &amp;#x3D; dist[pos][i] + tsp(dp, mask | (1 &amp;lt;&amp;lt; i), i, dist, n)
            ans &amp;#x3D; min(ans, newAns)
    
    # 记录并返回当前状态的最短路径长度
    dp[mask][pos] &amp;#x3D; ans
    return ans&lt;span aria-hidden=&#34;true&#34; class=&#34;line-numbers-rows&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第二问复杂的多，改进遗传算法，增加一条代表无人机路径的染色体并且由于无人机载重限制，同一地点可能需要重复飞行，将配送地点当日物资需求量利用阶跃函数和取整函数进行分界设置为无人机染色体中该地点基因的权重，由此控制变异之后该地点基因出现概率。得出完成一次整体配送的最优方案时间。&lt;/p&gt;
&lt;p&gt;第三问延续第二问进行二次改进，设置配送车辆染色体 9 号基因的权重为较大值，即可使配送车辆染色体以较大的变异概率出现 9 号基因，即中途返回出发地，得出完成一次整体配送最优方案时间。&lt;/p&gt;
&lt;p&gt;第四问由于计划设置两个应急物资集中地点，因此使用 K-median 聚类方法进行聚类，同时，将各地点当日物资需求量作为聚类点集权重，聚类得出两个应急物资中心点为地点 5 和地点 25，且将图分为两部分，之后使用问题三中改进的遗传算法计算两次，分别得出两个应急物资点完成一次整体配送的最优方案。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
